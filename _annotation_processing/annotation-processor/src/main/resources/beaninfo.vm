package ${model.packageName};

import java.beans.BeanDescriptor;
import java.beans.IntrospectionException;
import java.beans.MethodDescriptor;
import java.beans.ParameterDescriptor;
import java.beans.PropertyDescriptor;
import java.lang.reflect.Method;

public class ${model.beanInfoClassName} extends java.beans.SimpleBeanInfo {

/**
* Gets the bean class object.
*
* @return the bean class
*/
public static Class<?> getBeanClass() {

return ${model.qualifiedName}.class;
}

/**
* Gets the bean class name.
*
* @return the bean class name
*/
public static String getBeanClassName() {

return "${model.qualifiedName}";
}

/**
* Returns the ${model.qualifiedName} bean descriptor.
*
* @return the bean descriptor
*/
public BeanDescriptor getBeanDescriptor() {

BeanDescriptor descriptor = new BeanDescriptor(getBeanClass());

descriptor.setName("${model.className}");
descriptor.setDisplayName("${model.className}");
descriptor.setShortDescription("${model.description}");
descriptor.setExpert(${model.expert});
descriptor.setHidden(${model.hidden});
descriptor.setPreferred(${model.preferred});

return descriptor;
}

/**
* Returns the list of property descriptors for the ${model.qualifiedName} bean.
*
* @return the list of property descriptors
*/
public PropertyDescriptor[] getPropertyDescriptors() {

return new PropertyDescriptor[] {
#foreach($property in $properties)
get${display.capitalize(${property.name})}PropertyDescriptor()#if(${velocityHasNext}),#end

#end
};
}

/**
* Returns the list of method descriptors for the ${model.qualifiedName} bean.
*
* @return the list of method descriptors
*/
public MethodDescriptor[] getMethodDescriptors() {

return new MethodDescriptor[] {
#foreach($method in $methods)
get${display.capitalize(${method.name})}MethodDescriptor()#if(${velocityHasNext}),#end

#end
};
}
#foreach($property in $properties)

/**
* Returns the ${property.name} property descriptor.
*
* @return the property descriptor
*/
public PropertyDescriptor get${display.capitalize(${property.name})}PropertyDescriptor() {

// create a property descriptor with usual names for getter and setter
try {
PropertyDescriptor descriptor = new PropertyDescriptor("${property.name}", getBeanClass());

descriptor.setBound(true);
descriptor.setName("${property.name}");
descriptor.setDisplayName("${property.name}");
descriptor.setShortDescription("${property.description}");
descriptor.setExpert(${property.expert});
descriptor.setHidden(${property.hidden});
descriptor.setPreferred(${property.preferred});

return descriptor;

} catch (IntrospectionException e) {
return null;
}
}
#end
#foreach($method in $methods)

/**
* Returns the ${method.name}() method descriptor.
*
* @return the method descriptor
*/
public MethodDescriptor get${display.capitalize(${method.name})}MethodDescriptor() {

try {
// finds the method using getMethod with parameter types
Class<?>[] parameterTypes = {#foreach($param in $method.parameters)${param.qualifiedType}.class#if(${velocityHasNext}), #end#end};
Method method = getBeanClass().getMethod("${method.name}", parameterTypes);

// creates the method parameter descriptors
    #foreach($param in $method.parameters)
    ParameterDescriptor parameterDescriptor${velocityCount} = new ParameterDescriptor();
    parameterDescriptor${velocityCount}.setName("${param.name}");
    parameterDescriptor${velocityCount}.setDisplayName("${param.name}");
    parameterDescriptor${velocityCount}.setShortDescription("${param.description}");
    parameterDescriptor${velocityCount}.setExpert(${param.expert});
    parameterDescriptor${velocityCount}.setHidden(${param.hidden});
    parameterDescriptor${velocityCount}.setPreferred(${param.preferred});
    #end

ParameterDescriptor[] parameterDescriptors = {
    #foreach($param in $method.parameters)
    parameterDescriptor${velocityCount}#if(${velocityHasNext}),#end

    #end
};

MethodDescriptor descriptor = new MethodDescriptor(method, parameterDescriptors);

descriptor.setName("${method.name}(#foreach($param in $method.parameters)${param.qualifiedType}#if(${velocityHasNext}), #end#end)");
descriptor.setDisplayName("${method.name}(#foreach($param in $method.parameters)${param.qualifiedType}#if(${velocityHasNext}), #end#end)");
descriptor.setShortDescription("${method.description}");
descriptor.setExpert(${method.expert});
descriptor.setHidden(${method.hidden});
descriptor.setPreferred(${method.preferred});

return descriptor;

} catch (NoSuchMethodException | SecurityException e) {
return null;
}
}
#end
}
